  //Itérer avec Async/Await: Ecrire une fonction async iterateWithAsyncAwait qui prend un tableau de valeurs et enregistre chaque valeur avec un délai de 1 seconde entre les enregistrements.

async function iterateWithAsyncAwait(valeur = []) {
  for (let i = 0; i < valeur.length; i++) {
    console.log(valeur[i]);
    setInterval(1000) 
  }
}
const value = [1,2,3,4]
iterateWithAsyncAwait(value)

//Attendre un appel: Créer une fonction asynchrone awaitCall qui simule l'obtention de données à partir d'une API. Utilisez await pour attendre la réponse de l'API, puis enregistrez les données.

async function awaitCall(API_URL) {
  const reponse = await fetch(`${API_URL}`)
  console.log(reponse);
  
}
awaitCall("/api/thing")

//Gérer les erreurs avec Async/Await:Modifiez la fonction awaitCall pour gérer les erreurs de manière élégante. Si l'appel à l'API échoue, attrapez l'erreur et enregistrez un message d'erreur convivial.
async function awaitCall(API_URL) {
  try {
    const reponse = await fetch(`${API_URL}`)
    console.log(reponse);
  } catch (error) {
    console.log(error);
    
  }
  
}
